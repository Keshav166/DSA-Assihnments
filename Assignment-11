#include <iostream>
#include <string>
using namespace std;

class HashTable {
    // Array size for hash table
    int size = 10;
    
    // Structure to represent an employee
    struct Employee {
        int id;
        string name;
    };
    
    // Array to store employees
    Employee table[10];

public:
    // Constructor to initialize the table
    HashTable() {
        // Initialize all slots to -1 (empty)
        for (int i = 0; i < size; i++) {
            table[i].id = -1;
        }
    }

    // Hash function to map employee id to table index
    int hashFunction(int id) {
        return id % size;
    }

    // Insert employee into the hash table
    void insert(int id, string name) {
        int index = hashFunction(id);

        // Linear probing to resolve collisions
        while (table[index].id != -1) {
            index = (index + 1) % size;  // Wrap around if we reach the end of the table
        }

        // Insert employee data at the found index
        table[index].id = id;
        table[index].name = name;
    }

    // Search for an employee by ID
    void search(int id) {
        int index = hashFunction(id);

        // Linear probing to find the employee
        while (table[index].id != -1) {
            if (table[index].id == id) {
                cout << "Employee found: ID = " << table[index].id << ", Name = " << table[index].name << endl;
                return;
            }
            index = (index + 1) % size;
        }

        cout << "Employee with ID " << id << " not found." << endl;
    }

    // Display all employees in the table
    void display() {
        cout << "Employees in the database:" << endl;
        for (int i = 0; i < size; i++) {
            if (table[i].id != -1) {
                cout << "ID: " << table[i].id << " Name: " << table[i].name << endl;
            }
        }
    }
};

int main() {
    // Create the hash table object
    HashTable ht;

    // Insert employees into the hash table
    ht.insert(101, "Alice");
    ht.insert(102, "Bob");
    ht.insert(103, "Charlie");
    ht.insert(104, "David");

    // Display all employees in the hash table
    ht.display();

    // Search for specific employees
    ht.search(102);  // Should find Bob
    ht.search(105);  // Should not find any employee

    return 0;
}
