#include <iostream>
using namespace std;

class Node {
public:
    char data; // Character data
    Node* prev; // Pointer to the previous node
    Node* next; // Pointer to the next node

    Node(char c) {
        data = c; // Initialize data
        prev = NULL; // Initialize prev pointer
        next = NULL; // Initialize next pointer
    }
};

class TextEditor {
private:
    Node* head; // Pointer to the head of the list
    Node* tail; // Pointer to the tail of the list

public:
    TextEditor() {
        head = NULL; // Initialize head
        tail = NULL; // Initialize tail
    }

    // Insert text character by character
    void InsertText(const char* text) {
        while (*text != '\0') { // Loop through each character until null terminator
            Node* newNode = new Node(*text); // Create a new node with the character
            if (head == NULL) { // If the list is empty
                head = newNode; // Set head to new node
                tail = newNode; // Set tail to new node
            } else {
                tail->next = newNode; // Link the new node to the end of the list
                newNode->prev = tail; // Link back to the last node
                tail = newNode; // Update tail
            }
            text++; // Move to the next character
        }
    }

    // Delete the last character
    void DeleteText() {
        if (tail == NULL) { // If the list is empty
            cout << "Nothing to delete!" << endl;
            return;
        }
        Node* toDelete = tail; // Node to be deleted
        tail = tail->prev; // Move tail back
        if (tail != NULL) {
            tail->next = NULL; // Set the next of new tail to NULL
        } else {
            head = NULL; // If the list is empty now
        }
        delete toDelete; // Free memory
    }

    // Display the text
    void DisplayText() {
        Node* temp = head; // Start from head
        if (temp == NULL) {
            cout << "No text to display." << endl;
            return;
        }
        while (temp != NULL) { // Traverse the list
            cout << temp->data; // Print the character
            temp = temp->next; // Move to the next node
        }
        cout << endl; // Print a new line
    }

    // Search for a character
    void SearchText(char c) {
        Node* temp = head; // Start from head
        int pos = 1; // Position counter
        while (temp != NULL) { // Traverse the list
            if (temp->data == c) {
                cout << "Character '" << c << "' found at position " << pos << endl;
                return; // Exit if found
            }
            temp = temp->next; // Move to the next node
            pos++; // Increment position
        }
        cout << "Character '" << c << "' not found!" << endl; // If not found
    }

    // Print text in reverse
    void PrintReverse() {
        Node* temp = tail; // Start from tail
        if (temp == NULL) {
            cout << "No text to print in reverse." << endl;
            return;
        }
        while (temp != NULL) { // Traverse the list backwards
            cout << temp->data; // Print the character
            temp = temp->prev; // Move to the previous node
        }
        cout << endl; // Print a new line
    }
};

int main() {
    TextEditor editor; // Create a TextEditor object
    int choice;
    char agree = 'Y';

    while (agree == 'Y' || agree == 'y') {
        cout << "\n--- Text Editor Menu ---";
        cout << "\n1. Insert text";
        cout << "\n2. Delete last character";
        cout << "\n3. Display text";
        cout << "\n4. Search for a character";
        cout << "\n5. Print text in reverse";
        cout << "\n6. Exit";
        cout << "\nChoose an option: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                char text[100]; // Array to hold text
                cout << "Enter text to insert: ";
                cin >> text; // Read user input
                editor.InsertText(text); // Insert text
                break;
            }
            case 2:
                editor.DeleteText(); // Delete last character
                break;
            case 3:
                editor.DisplayText(); // Display text
                break;
            case 4: {
                char c;
                cout << "Enter character to search: ";
                cin >> c; // Read character to search
                editor.SearchText(c); // Search for character
                break;
            }
            case 5:
                editor.PrintReverse(); // Print text in reverse
                break;
            case 6:
                cout << "Exiting the program." << endl;
                return 0; // Exit the program
            default:
                cout << "Invalid choice! Please try again." << endl;
        }

        cout << "Do you want to continue? (Y/N): ";
        cin >> agree; // Ask user if they want to continue
    }

    return 0;
}
