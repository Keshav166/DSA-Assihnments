#include <iostream>
using namespace std;

class Node {
public:
    char data;
    Node* prev;
    Node* next;

    Node(char c) {
        data = c;
        prev = NULL;
        next = NULL;
    }
};

class TextEditor {
private:
    Node* head;
    Node* tail;

public:
    TextEditor() {
        head = NULL;
        tail = NULL;
    }

    // Insert text character by character
    void InsertText(const char* text) {
        while (*text != '\0') {
            Node* newNode = new Node(*text);
            if (head == NULL) {
                head = newNode;
                tail = newNode;
            } else {
                tail->next = newNode;
                newNode->prev = tail;
                tail = newNode;
            }
            text++;
        }
    }

    // Delete the last character
    void DeleteText() {
        if (tail == NULL) {
            cout << "Nothing to delete!" << endl;
            return;
        }
        Node* toDelete = tail;
        tail = tail->prev;
        if (tail != NULL) {
            tail->next = NULL;
        } else {
            head = NULL;
        }
        delete toDelete;
    }

    // Display the text
    void DisplayText() {
        Node* temp = head;
        if (temp == NULL) {
            cout << "No text to display." << endl;
            return;
        }
        while (temp != NULL) {
            cout << temp->data;
            temp = temp->next;
        }
        cout << endl;
    }

    // Search for a character
    void SearchText(char c) {
        Node* temp = head; // Start from the head
        int pos = 1; // Position counter
        while (temp != NULL) {
            if (temp->data == c) { // Check if the current node's data matches the character
                cout << "Character '" << c << "' found at position " << pos << endl;
                return;
            }
            temp = temp->next; // Move to the next node
            pos++; // Increment position
        }
        cout << "Character '" << c << "' not found!" << endl;
    }

    // Print text in reverse
    void PrintReverse() {
        Node* temp = tail;
        if (temp == NULL) {
            cout << "No text to print in reverse." << endl;
            return;
        }
        while (temp != NULL) {
            cout << temp->data;
            temp = temp->prev;
        }
        cout << endl;
    }
};

int main() {
    TextEditor editor;
    int choice;
    char agree = 'Y';

    while (agree == 'Y' || agree == 'y') {
        cout << "\n--- Text Editor Menu ---";
        cout << "\n1. Insert text";
        cout << "\n2. Delete last character";
        cout << "\n3. Display text";
        cout << "\n4. Search for a character";
        cout << "\n5. Print text in reverse";
        cout << "\n6. Exit";
        cout << "\nChoose an option: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                char text[100];
                cout << "Enter text to insert: ";
                cin >> text;
                editor.InsertText(text);
                break;
            }
            case 2:
                editor.DeleteText();
                break;
            case 3:
                editor.DisplayText();
                break;
            case 4: {
                char c;
                cout << "Enter character to search: ";
                cin >> c;
                editor.SearchText(c);
                break;
            }
            case 5:
                editor.PrintReverse();
                break;
            case 6:
                cout << "Exiting the program." << endl;
                return 0;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }

        cout << "Do you want to continue? (Y/N): ";
        cin >> agree;
    }

    return 0;
}
